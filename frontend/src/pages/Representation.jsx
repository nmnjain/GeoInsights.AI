import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";

import { Link } from "lucide-react";

function Representation() {
  const [selectedTimeframe, setSelectedTimeframe] = useState("month");
  const [copyStatus, setCopyStatus] = useState("idle"); // idle, copying, success, error
  const [downloadStatus, setDownloadStatus] = useState("idle"); // idle, downloading, success, error
  const location = useLocation();
  const navigate = useNavigate()

  // Mock response data for demonstration
  const responseData = location.state?.responseData
  // console.log("naman Data:", responseData);


  // Parse analysis data from response
  const getAnalysisData = () => {
    if (!responseData?.data?.analysis) return null;

    const analysis = responseData.data.analysis;

    // Extract key metrics from analysis text
    const extractMetric = (text, pattern) => {
      const match = text.match(pattern);
      return match ? match[1] : "N/A";
    };

    return {
      population:
        extractMetric(analysis, /population[:\s]*([0-9,]+)/i) || "2,500/km²",
      waterLevel:
        extractMetric(analysis, /water level[:\s]*([0-9.]+)/i) || "68%",
      location: "18.510866, 73.854565",
      ward: "NGO Monitored",
      analysisText: analysis,
    };
  };

  const analysisData = getAnalysisData();
  const hasData = responseData && responseData.data.success;

  // Sample data for visualization
  const waterLevelTrend = [
    { year: "2019", level: 65, quality: "Good" },
    { year: "2020", level: 58, quality: "Fair" },
    { year: "2021", level: 72, quality: "Good" },
    { year: "2022", level: 45, quality: "Poor" },
    { year: "2023", level: 68, quality: "Good" },
    { year: "2024", level: 55, quality: "Fair" },
  ];

  const maxWaterLevel = Math.max(...waterLevelTrend.map((d) => d.level));

  const getWaterQualityColor = (quality) => {
    switch (quality) {
      case "Good":
        return "#10B981";
      case "Fair":
        return "#F59E0B";
      case "Poor":
        return "#EF4444";
      default:
        return "#6B7280";
    }
  };

  const getStatusColor = (status) => {
    if (status === true || status === "success" || status === "completed")
      return "#10B981";
    if (status === "processing" || status === "pending") return "#F59E0B";
    return "#EF4444";
  };

  // Generate comprehensive summary for copying
  const generateSummary = () => {
    const summary = `
🌍 ENVIRONMENTAL ANALYSIS DASHBOARD - PUNE REGION
═══════════════════════════════════════════════════

📊 ANALYSIS OVERVIEW
────────────────────
• Location: ${analysisData?.location}
• Population Density: ${analysisData?.population}
• Current Water Level: ${analysisData?.waterLevel}
• Ward/Role: ${analysisData?.ward}
• Analysis Status: ${responseData.success ? "Successfully Completed" : "Processing"
      }

📈 HISTORICAL WATER LEVELS (2019-2024)
──────────────────────────────────────
${waterLevelTrend
        .map((item) => `• ${item.year}: ${item.level}% (Quality: ${item.quality})`)
        .join("\n")}

📋 DETAILED ANALYSIS REPORT
───────────────────────────
${analysisData?.analysisText}

🔍 KEY INSIGHTS
───────────────
• Population Analysis: Analysis completed for coordinates (18.510866, 73.854565) in Pune region
• Water Level Monitoring: Historical data shows varying water levels with quality indicators
• Data Source: Pune Environmental Dashboard - NGO perspective analysis
• Current Status: ${responseData.success
        ? "Analysis successfully completed"
        : "Processing in progress"
      }

📝 TECHNICAL DETAILS
────────────────────
• Query Processed: ${responseData.query_processed}
• Data Type: ${responseData.data?.raw_response ? "Raw Analysis" : "Processed Data"
      }
• Generated: ${new Date().toLocaleString()}
• Source: Pune Environmental Dashboard

════════════════════════════════════════════════════
Generated by Bayes-ic Environmental Analysis System
Made with ♥ by the Bayes-ic Team
════════════════════════════════════════════════════
    `.trim();
    return summary;
  };

  // Handle copy functionality
  const handleCopy = async () => {
    setCopyStatus("copying");

    try {
      const summary = generateSummary();
      await navigator.clipboard.writeText(summary);
      setCopyStatus("success");

      setTimeout(() => {
        setCopyStatus("idle");
      }, 3000);
    } catch (error) {
      setCopyStatus("error");
      console.error("Failed to copy:", error);

      setTimeout(() => {
        setCopyStatus("idle");
      }, 3000);
    }
  };

  // Handle download functionality
  const handleDownload = () => {
    setDownloadStatus("downloading");

    try {
      const summary = generateSummary();
      const blob = new Blob([summary], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `Environmental_Analysis_Report_${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      setDownloadStatus("success");

      setTimeout(() => {
        setDownloadStatus("idle");
      }, 3000);
    } catch (error) {
      setDownloadStatus("error");
      console.error("Failed to download:", error);

      setTimeout(() => {
        setDownloadStatus("idle");
      }, 3000);
    }
  };

  if (!responseData.success) {
    return (
      <div className="min-h-screen bg-gray-900 text-white p-4 flex items-center justify-center">
        <div className="text-center max-w-md mx-auto">
          <div className="w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg
              className="w-8 h-8 text-red-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
              />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-white mb-2">
            No Data Available
          </h2>
          <p className="text-gray-400 mb-4">
            Please go back and generate analysis with coordinates first.
          </p>
          <button
            onClick={() => navigate('/earth')}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors"
          >
            Search Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-4">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center gap-3 mb-2">
          <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center">
            <svg
              className="w-5 h-5 text-white"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fillRule="evenodd"
                d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z"
                clipRule="evenodd"
              />
            </svg>
          </div>
          <h1 className="text-3xl font-bold text-white">
            Environmental Analysis Dashboard
          </h1>
        </div>
        <p className="text-gray-400">
          Population and Water Level Analysis for Pune Region
        </p>

        {/* Analysis Status */}
        <div className="mt-4 flex items-center gap-4">
          <div className="flex items-center gap-2">
            <div
              className="w-3 h-3 rounded-full"
              style={{ backgroundColor: getStatusColor(responseData.success) }}
            ></div>
            <span className="text-sm text-gray-300">
              Status:{" "}
              {responseData.success ? "Analysis Complete" : "Processing"}
            </span>
          </div>
          <div className="text-sm text-gray-400">
            Query: {responseData.message}
          </div>
        </div>
      </div>

      {/* Main Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-gradient-to-br from-blue-500/20 to-blue-600/10 border border-blue-500/30 rounded-lg p-6 hover:border-blue-400 transition-colors">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center">
              <svg
                className="w-5 h-5 text-blue-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                />
              </svg>
            </div>
            <div>
              <div className="text-2xl font-bold text-blue-400">
                {analysisData?.population || "Processing..."}
              </div>
              <div className="text-gray-400 text-sm">Population</div>
            </div>
          </div>
          <div className="text-xs text-gray-500">
            Based on coordinate analysis
          </div>
        </div>

        <div className="bg-gradient-to-br from-green-500/20 to-green-600/10 border border-green-500/30 rounded-lg p-6 hover:border-green-400 transition-colors">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center">
              <svg
                className="w-5 h-5 text-green-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"
                />
              </svg>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-400">
                {analysisData?.waterLevel || "Analyzing..."}
              </div>
              <div className="text-gray-400 text-sm">Water Level</div>
            </div>
          </div>
          <div className="text-xs text-gray-500">Current status monitoring</div>
        </div>

        <div className="bg-gradient-to-br from-purple-500/20 to-purple-600/10 border border-purple-500/30 rounded-lg p-6 hover:border-purple-400 transition-colors">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 bg-purple-500/20 rounded-lg flex items-center justify-center">
              <svg
                className="w-5 h-5 text-purple-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                />
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                />
              </svg>
            </div>
            <div>
              <div className="text-lg font-bold text-purple-400">
                {analysisData?.location || "18.51, 73.85"}
              </div>
              <div className="text-gray-400 text-sm">Coordinates</div>
            </div>
          </div>
          <div className="text-xs text-gray-500">Analysis location point</div>
        </div>

        <div className="bg-gradient-to-br from-orange-500/20 to-orange-600/10 border border-orange-500/30 rounded-lg p-6 hover:border-orange-400 transition-colors">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 bg-orange-500/20 rounded-lg flex items-center justify-center">
              <svg
                className="w-5 h-5 text-orange-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h4m-4 0v-9a2 2 0 012-2h2m2 0V5a2 2 0 012-2h2a2 2 0 012 2v4"
                />
              </svg>
            </div>
            <div>
              <div className="text-2xl font-bold text-orange-400">
                {analysisData?.ward || "NGO"}
              </div>
              <div className="text-gray-400 text-sm">Ward/Role</div>
            </div>
          </div>
          <div className="text-xs text-gray-500">Administrative data</div>
        </div>
      </div>

      {/* Analysis Results Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Analysis Text */}
        <div className="lg:col-span-2 bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
            <svg
              className="w-5 h-5 text-blue-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
              />
            </svg>
            Detailed Analysis Report
          </h3>
          <div className="bg-gray-900/50 rounded-lg p-4 border border-gray-600">
            <pre className="text-sm text-gray-300 whitespace-pre-wrap font-mono leading-relaxed">
              {responseData.data?.ans || "No analysis data available"}
            </pre>
          </div>
          <div className="mt-4 flex items-center gap-4 text-xs text-gray-400">
            <div className="flex items-center gap-1">
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              Generated: {new Date().toLocaleString()}
            </div>
            <div className="flex items-center gap-1">
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              Source: Pune Environmental Dashboard
            </div>
          </div>
        </div>

        {/* Query Information */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
            <svg
              className="w-5 h-5 text-green-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            Query Details
          </h3>
          <div className="space-y-3">
            <div className="bg-gray-900/50 rounded-lg p-3 border border-gray-600">
              <div className="text-xs text-gray-400 mb-1">Original Query</div>
              <div className="text-sm text-gray-200">
                {responseData.query_processed?.split("\n")[0] ||
                  "Population and water level analysis"}
              </div>
            </div>

            <div className="bg-gray-900/50 rounded-lg p-3 border border-gray-600">
              <div className="text-xs text-gray-400 mb-1">
                Processing Status
              </div>
              <div className="flex items-center gap-2">
                <div
                  className="w-2 h-2 rounded-full"
                  style={{
                    backgroundColor: getStatusColor(responseData.success),
                  }}
                ></div>
                <div className="text-sm text-gray-200">
                  {responseData.success
                    ? "Successfully Completed"
                    : "Processing"}
                </div>
              </div>
            </div>

            <div className="bg-gray-900/50 rounded-lg p-3 border border-gray-600">
              <div className="text-xs text-gray-400 mb-1">Data Type</div>
              <div className="text-sm text-gray-200">
                {responseData.data?.raw_response
                  ? "Raw Analysis"
                  : "Processed Data"}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 mb-8">
        <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
          <svg
            className="w-5 h-5 text-indigo-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"

strokeWidth="2"
              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
            />
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
          Interactive Ward Map
        </h3>
        <div className="w-full h-[600px] bg-gray-900 rounded-lg overflow-hidden">
          <iframe
            src="http://localhost:8501/?embed=true" // Replace with your Streamlit app's URL
            width="100%"
            height="100%"
            style={{ border: 'none' }}
            title="Streamlit Map"
          ></iframe>
        </div>
      </div>


      {/* Water Level Trends Chart */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        

        {/* Analysis Summary */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
            <svg
              className="w-5 h-5 text-purple-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z"
              />
            </svg>
            Key Insights
          </h3>

          <div className="space-y-4">
            {responseData?.data?.insights?.map((insight, index) => {
              const colors = ['blue', 'green', 'purple', 'orange', 'red', 'yellow'];
              const color = colors[index % colors.length];

              return (
                <div
                  key={index}
                  className={`bg-gradient-to-r from-${color}-500/10 to-transparent border-l-4 border-${color}-500 p-4 rounded`}
                >
                  <div className={`font-medium text-${color}-300 text-sm mb-1`}>
                    Key Insight {index + 1}
                  </div>
                  <div className="text-gray-300 text-sm">
                    {insight}
                  </div>
                </div>
              );
            }) || (
                <div className="bg-gradient-to-r from-gray-500/10 to-transparent border-l-4 border-gray-500 p-4 rounded">
                  <div className="font-medium text-gray-300 text-sm mb-1">
                    No Insights Available
                  </div>
                  <div className="text-gray-300 text-sm">
                    No insights were generated for this analysis.
                  </div>
                </div>
              )}

            

            {/* Keep the status card */}

          </div>
        </div>
      </div>

      {(() => {
              // Helper function to filter out null articles
              const validArticles = responseData?.data?.news_articles?.filter(article => article !== null) || [];
              const hasValidArticles = validArticles.length > 0;

              return (
                <div className="mb-8">
                  <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
                      <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
                      </svg>
                      Relevant News Articles
                      {hasValidArticles && (
                        <span className="text-sm text-gray-400 font-normal ml-2">
                          ({validArticles.length} articles)
                        </span>
                      )}
                    </h3>

                    {hasValidArticles ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {validArticles.map((article, index) => (
                          <div key={index} className="bg-gradient-to-br from-gray-900/80 to-gray-800/50 border border-gray-600 rounded-lg p-4 hover:border-red-500/50 transition-all duration-300 hover:shadow-lg group cursor-pointer">
                            <div className="flex items-start gap-3">
                              <div className="flex-shrink-0 w-10 h-10 bg-red-500/20 rounded-lg flex items-center justify-center group-hover:bg-red-500/30 transition-colors">
                                <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                                </svg>
                              </div>
                              <div className="flex-1 min-w-0">
                                <h4 className="text-sm font-medium text-white mb-2 group-hover:text-red-100 transition-colors">
                                  {article.headline}
                                </h4>
                                <div className="flex items-center gap-2 text-xs">
                                  <span className="text-gray-400 truncate">
                                    {article.provider || 'News Source'}
                                  </span>
                                  <div className="flex items-center gap-1 text-gray-500">
                                    <div className="w-1 h-1 bg-gray-500 rounded-full"></div>
                                    <span>Related News</span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="flex flex-col items-center justify-center py-8 text-center">
                        <div className="w-16 h-16 bg-gray-700/50 rounded-full flex items-center justify-center mb-4">
                          <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        <p className="text-gray-400 text-sm">No articles available related to this</p>
                        <p className="text-gray-500 text-xs mt-1">Check back later for updated news coverage</p>
                      </div>
                    )}
                  </div>
                </div>
              );
            })()}

      {/* Data Sources Section */}
{(() => {
  const dataSources = responseData?.data?.data_sources || [];
  const hasDataSources = dataSources.length > 0;

  return (
    <div className="mb-8">
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
          <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Data Sources
          {hasDataSources && (
            <span className="text-sm text-gray-400 font-normal ml-2">
              ({dataSources.length} sources)
            </span>
          )}
        </h3>
        
        {hasDataSources ? (
          <div className="space-y-3">
            {dataSources.map((source, index) => (
              <div key={index} className="bg-gradient-to-r from-gray-900/60 to-gray-800/40 border border-gray-600 rounded-lg p-4 hover:border-blue-500/50 transition-all duration-300">
                <div className="flex items-center gap-3">
                  <div className="flex-shrink-0 w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center">
                    <svg className="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                  </div>
                  <div className="flex-1">
                    <p className="text-sm text-gray-200">{source}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center py-8 text-center">
            <div className="w-16 h-16 bg-gray-700/50 rounded-full flex items-center justify-center mb-4">
              <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
            <p className="text-gray-400 text-sm">No data sources available</p>
          </div>
        )}
      </div>
    </div>
  );
})()}

{/* Next 5 Years Predictions Section */}
{(() => {
  const predictions = responseData?.data?.predictions_next_5_years;
  const hasPredictions = predictions && predictions.trim().length > 0;

  return (
    <div className="mb-8">
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
          <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
          </svg>
          Next 5 Years Trends & Predictions
        </h3>
        
        {hasPredictions ? (
          <div className="bg-gradient-to-br from-green-900/20 to-blue-900/20 border border-green-500/30 rounded-lg p-5">
            <div className="flex items-start gap-3">
              <div className="flex-shrink-0 w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center mt-1">
                <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div className="flex-1">
                <div className="prose prose-invert max-w-none">
                  <p className="text-gray-200 text-sm leading-relaxed mb-0">
                    {predictions}
                  </p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center py-8 text-center">
            <div className="w-16 h-16 bg-gray-700/50 rounded-full flex items-center justify-center mb-4">
              <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </div>
            <p className="text-gray-400 text-sm">No predictions available</p>
            <p className="text-gray-500 text-xs mt-1">Future trends analysis not available for this data</p>
          </div>
        )}
      </div>
    </div>
  );
})()}


      {/* Action Buttons Section */}
      <div className="mb-8">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-lg flex items-center justify-center">
                <svg
                  className="w-5 h-5 text-blue-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"
                  />
                </svg>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">Export Analysis</h3>
                <p className="text-sm text-gray-400">Save or share your environmental analysis report</p>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
              {/* Copy Button */}
              <button
                onClick={handleCopy}
                disabled={copyStatus === "copying"}
                className={`
                  flex items-center justify-center gap-3 px-6 py-3 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 active:scale-95 min-w-[140px]
                  ${copyStatus === "copying"
                    ? "bg-blue-600/50 text-blue-300 cursor-not-allowed"
                    : copyStatus === "success"
                      ? "bg-green-600 text-white shadow-lg shadow-green-500/25"
                      : copyStatus === "error"
                        ? "bg-red-600 text-white shadow-lg shadow-red-500/25"
                        : "bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-500 hover:to-blue-600 text-white shadow-lg shadow-blue-500/25 border border-blue-500/30"
                  }
                `}
              >
                {copyStatus === "copying" ? (
                  <>
                    <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    <span className="text-sm">Copying...</span>
                  </>
                ) : copyStatus === "success" ? (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-sm">Copied!</span>
                  </>
                ) : copyStatus === "error" ? (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    <span className="text-sm">Failed</span>
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    <span className="text-sm">Copy Summary</span>
                  </>
                )}
              </button>

              {/* Download Button */}
              <button
                onClick={handleDownload}
                disabled={downloadStatus === "downloading"}
                className={`
                  flex items-center justify-center gap-3 px-6 py-3 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 active:scale-95 min-w-[140px]
                  ${downloadStatus === "downloading"
                    ? "bg-purple-600/50 text-purple-300 cursor-not-allowed"
                    : downloadStatus === "success"
                      ? "bg-green-600 text-white shadow-lg shadow-green-500/25"
                      : downloadStatus === "error"
                        ? "bg-red-600 text-white shadow-lg shadow-red-500/25"
                        : "bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-500 hover:to-purple-600 text-white shadow-lg shadow-purple-500/25 border border-purple-500/30"
                  }
                `}
              >
                {downloadStatus === "downloading" ? (
                  <>
                    <svg className="w-4 h-4 animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                    </svg>
                    <span className="text-sm">Downloading...</span>
                  </>
                ) : downloadStatus === "success" ? (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-sm">Downloaded!</span>
                  </>
                ) : downloadStatus === "error" ? (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    <span className="text-sm">Failed</span>
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <span className="text-sm">Download Report</span>
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Status Messages */}
          {(copyStatus === "success" || downloadStatus === "success" || copyStatus === "error" || downloadStatus === "error") && (
            <div className="mt-4 pt-4 border-t border-gray-700">
              <div className="flex flex-col sm:flex-row gap-2 text-xs">
                {copyStatus === "success" && (
                  <div className="flex items-center gap-2 text-green-400">
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                    </svg>
                    Analysis summary copied to clipboard successfully
                  </div>
                )}
                {copyStatus === "error" && (
                  <div className="flex items-center gap-2 text-red-400">
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Failed to copy to clipboard. Please try again.
                  </div>
                )}
                {downloadStatus === "success" && (
                  <div className="flex items-center gap-2 text-green-400">
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                    </svg>
                    Report downloaded successfully to your device
                  </div>
                )}
                {downloadStatus === "error" && (
                  <div className="flex items-center gap-2 text-red-400">
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Download failed. Please try again.
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="mt-12 pt-8 border-t border-gray-700">
        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center">
              <svg
                className="w-5 h-5 text-white"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <span className="text-white font-semibold">Bayes-ic</span>
          </div>
          <div className="text-sm text-gray-400">
            Made with <span className="text-red-500">♥</span> by the Bayes-ic
            Team
          </div>
        </div>
      </div>
    </div>
  );
}

export default Representation;